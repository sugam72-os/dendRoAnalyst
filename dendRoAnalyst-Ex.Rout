
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dendRoAnalyst"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('dendRoAnalyst')
Loading required package: boot
Loading required package: pspline
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("clim.twd")
> ### * clim.twd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clim.twd
> ### Title: Calculating relative growth change during no-rain periods.
> ### Aliases: clim.twd
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(gf_nepa17)
> data(ktm_rain17)
> relative_dry_growth<-clim.twd(df=gf_nepa17, Clim=ktm_rain17, dailyValue='max', showPlot=TRUE)
[1] "The adverse climatic periods are listed below:"
   start_doy end_doy  Id
1          5      15   1
2         21      27   4
3         29      33   5
4         35      41   6
5         43      47   7
6         53      61  10
7         65      68  12
8         81      83  20
9         85      87  21
10        95      97  27
11        99     103  28
12       107     109  31
13       115     118  36
14       153     156  60
15       165     167  68
16       256     259 144
17       266     270 150
18       281     286 158
19       288     291 159
20       297     301 162
21       306     313 166
22       315     325 167
23       329     339 169
24       341     347 170
25       349     361 171
[1] "Please choose periods' id from the list. Please press enter two times when you are done."
1: 1
2: 
Read 1 item
> head(relative_dry_growth,10)
   Time_lag rel_change_T2 rel_change_T3 period_id strt end
1         1   -0.06778336   -0.00242233         1    5  15
2         2   -0.07988739   -0.00871277         1    5  15
3         3   -0.11232758   -0.00774384         1    5  15
4         4   -0.09828568   -0.00823212         1    5  15
5         5   -0.11474991   -0.00871277         1    5  15
6         6   -0.12540055    0.52817917         1    5  15
7         7   -0.10748673    0.61629867         1    5  15
8         8   -0.10313034    0.60613251         1    5  15
9         9   -0.07117463    0.60564804         1    5  15
10       10   -0.07843399    0.59209061         1    5  15
> 
> 
> 
> 
> cleanEx()
> nameEx("daily.data")
> ### * daily.data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: daily.data
> ### Title: Calculation of daily statistics for dendrometer data
> ### Aliases: daily.data
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(nepa17)
> daily_stats<-daily.data(df=nepa17, TreeNum=1)
> head(daily_stats,10)
   DOY      min Time_Minimum      max Time_Maximum     mean   median  amplitude
1    1 62.26459     00:00:00 62.46939     08:00:00 62.42616 62.45317 0.20480347
2    2 62.46697     14:00:00 62.54298     08:00:00 62.49773 62.48827 0.07601166
3    3 62.52023     00:00:00 62.76301     15:00:00 62.64272 62.62457 0.24278260
4    4 62.58774     17:00:00 62.82547     08:00:00 62.71532 62.75405 0.23772812
5    5 62.60904     15:00:00 62.75768     09:00:00 62.66623 62.64826 0.14863968
6    6 62.54610     17:00:00 62.74558     09:00:00 62.65189 62.65746 0.19947815
7    7 62.60953     15:00:00 62.71314     08:00:00 62.65300 62.64148 0.10361099
8    8 62.52673     17:00:00 62.72718     08:00:00 62.63242 62.64923 0.20044708
9    9 62.54465     17:00:00 62.71072     08:00:00 62.62954 62.62405 0.16606903
10  10 62.52867     16:00:00 62.70007     08:00:00 62.61818 62.62042 0.17139435
> 
> 
> 
> 
> cleanEx()
> nameEx("dendro.resample")
> ### * dendro.resample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dendro.resample
> ### Title: Resampling temporal resolution of dendrometer data
> ### Aliases: dendro.resample
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(nepa17)
> # To resample monthly with maximum value
> resample_M<-dendro.resample(df=nepa17[,1:2], by='M', value='max')
> head(resample_M,10)
         Time       T2
1  2017-01-01 63.90855
2  2017-02-01 64.88705
3  2017-03-01 67.17670
4  2017-04-01 66.83197
5  2017-05-01 67.34470
6  2017-06-01 68.24525
7  2017-07-01 72.09682
8  2017-08-01 74.38196
9  2017-09-01 76.24310
10 2017-10-01 77.25453
> 
> 
> 
> 
> cleanEx()
> nameEx("dendro.truncate")
> ### * dendro.truncate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dendro.truncate
> ### Title: Truncation of the dendrometer data
> ### Aliases: dendro.truncate
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(nepa)
> #Extracting data from doy 20 to 50 in 2017.
> trunc1<-dendro.truncate(df=nepa, CalYear=2017, DOY=c(20,50))
> head(trunc1,10)
                  Time       T2       T3
1  2017-01-20 00:00:00 64.92424 48.87772
2  2017-01-20 01:00:00 64.93150 48.87918
3  2017-01-20 02:00:00 64.93634 48.87966
4  2017-01-20 03:00:00 64.94021 48.88062
5  2017-01-20 04:00:00 64.94602 48.88305
6  2017-01-20 05:00:00 64.95280 48.88305
7  2017-01-20 06:00:00 64.95910 48.88208
8  2017-01-20 07:00:00 64.96249 48.88547
9  2017-01-20 08:00:00 64.96636 48.88498
10 2017-01-20 09:00:00 64.96733 48.88450
> 
> 
> 
> 
> cleanEx()
> nameEx("jump.locator")
> ### * jump.locator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jump.locator
> ### Title: Removing artefacts due to manual adjustments of dendrometers
> ### Aliases: jump.locator
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(nepa)
> jump_free_nepa<-jump.locator(df=nepa, TreeNum=1 ,v=1)
[1] "The jump(s) in dendrometer data:"
  Location Time                  Difference
1 "6000"   "2017-01-09 17:00:00" "1.993"   
2 "9000"   "2017-05-14 17:00:00" "-2.753"  
Press [enter] to continue
Press [enter] to adjust this jump
Press [enter] to continue
Press [enter] to adjust this jump
Press [enter] to continue
Done!!!> head(jump_free_nepa,10)
                  Time       T2
1  2016-05-04 18:00:00 47.61461
2  2016-05-04 19:00:00 47.67029
3  2016-05-04 20:00:00 47.76567
4  2016-05-04 21:00:00 47.83297
5  2016-05-04 22:00:00 47.86202
6  2016-05-04 23:00:00 47.93174
7  2016-05-05 00:00:00 47.97241
8  2016-05-05 01:00:00 48.05181
9  2016-05-05 02:00:00 48.10701
10 2016-05-05 03:00:00 48.13606
> 
> 
> 
> 
> cleanEx()
> nameEx("network.interpolation")
> ### * network.interpolation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: network.interpolation
> ### Title: Interpolation of NA values using the dendrometer network
> ### Aliases: network.interpolation
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data("gf_nepa17")
> df1<-gf_nepa17
> # Creating an artificial reference dataset.
> df2<-cbind(gf_nepa17,gf_nepa17[,2:3],gf_nepa17[,2:3])
> # Creating gaps in dataset by replacing some of the reading with NA in dataset.
> df1[40:50,3]<-NA
> # Using proportional interpolation method.
> df1_NI<-network.interpolation(df=df1, referenceDF=df2, niMethod='proportional')
Warning in norm.inter(t, adj.alpha) :
  extreme order statistics used as endpoints
[1] "Interpolation in T3"
         Time Interpolated_value    LCI95    UCI95
1  1483369200           48.31525 48.30600 48.32141
2  1483372800           48.31522 48.31331 48.31585
3  1483376400           48.31533 48.31447 48.31590
4  1483380000           48.31441 48.31387 48.31459
5  1483383600           48.31618 48.31554 48.31662
6  1483387200           48.31777 48.31693 48.31833
7  1483390800           48.31887 48.31852 48.31899
8  1483394400           48.31759 48.31438 48.31974
9  1483398000           48.32877 48.32534 48.32991
10 1483401600           48.33870 48.33216 48.34088
11 1483405200           48.34766 48.34015 48.35016
> head(df1_NI,10)
                  Time       T2       T3
1  2017-01-01 00:00:00 62.26459 48.16801
2  2017-01-01 01:00:00 62.27330 48.16559
3  2017-01-01 02:00:00 62.30913 48.16269
4  2017-01-01 03:00:00 62.34835 48.16414
5  2017-01-01 04:00:00 62.37740 48.16269
6  2017-01-01 05:00:00 62.42001 48.16705
7  2017-01-01 06:00:00 62.44954 48.16801
8  2017-01-01 07:00:00 62.46407 48.18302
9  2017-01-01 08:00:00 62.46939 48.20869
10 2017-01-01 09:00:00 62.46552 48.21498
> 
> 
> 
> 
> cleanEx()
> nameEx("phase.sc")
> ### * phase.sc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phase.sc
> ### Title: Application of the stem-cycle approach to calculate different
> ###   phases, their duration and to plot them.
> ### Aliases: phase.sc
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(gf_nepa17)
> sc.phase<-phase.sc(df=gf_nepa17, TreeNum=1, smoothing=12, outputplot=TRUE, days=c(150,160))
> head(sc.phase[[1]],10)
   Phases               start                 end Duration_m Duration_h
2       3 2017-01-01 01:00:00 2017-01-01 10:00:00        540          9
3       1 2017-01-01 10:00:00 2017-01-01 16:00:00        360          6
4       2 2017-01-01 16:00:00 2017-01-01 21:00:00        300          5
5       3 2017-01-01 21:00:00 2017-01-02 09:00:00        720         12
6       1 2017-01-02 09:00:00 2017-01-02 18:00:00        540          9
7       2 2017-01-02 18:00:00 2017-01-03 01:00:00        420          7
8       3 2017-01-03 01:00:00 2017-01-04 09:00:00       1920         32
9       1 2017-01-04 09:00:00 2017-01-04 20:00:00        660         11
10      2 2017-01-04 20:00:00 2017-01-05 09:00:00        780         13
11      1 2017-01-05 09:00:00 2017-01-05 19:00:00        600         10
     magnitude       rate DOY
2   0.20092774  22.325304   1
3  -0.00968170  -1.613617   1
4   0.00920104   1.840208   1
5   0.07794953   6.495794   1
6  -0.06003571  -6.670634   2
7   0.03727722   5.325317   2
8   0.30524064   9.538770   3
9  -0.22417069 -20.379154   4
10  0.15009308  11.545622   4
11 -0.13653564 -13.653564   5
> head(sc.phase[[2]],10)
                  Time Phases
1  2017-01-01 00:00:00     NA
2  2017-01-01 01:00:00      3
3  2017-01-01 02:00:00      3
4  2017-01-01 03:00:00      3
5  2017-01-01 04:00:00      3
6  2017-01-01 05:00:00      3
7  2017-01-01 06:00:00      3
8  2017-01-01 07:00:00      3
9  2017-01-01 08:00:00      3
10 2017-01-01 09:00:00      3
> 
> 
> 
> 
> cleanEx()
> nameEx("phase.zg")
> ### * phase.zg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phase.zg
> ### Title: Application of the zero-growth approach to calculate different
> ###   phases, their duration and to plot them.
> ### Aliases: phase.zg
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(gf_nepa17)
> zg.phase<-phase.zg(df=gf_nepa17, TreeNum=1, outputplot=TRUE, days=c(150,160))
> head(zg.phase[[1]],10)
   DOY Phases               start                 end Duration_h  magnitude
2    1    GRO 2017-01-01 01:00:00 2017-01-01 09:00:00          8 0.20480347
3    2    TWD 2017-01-01 09:00:00 2017-01-02 00:00:00         15         NA
4    2    GRO 2017-01-02 00:00:00 2017-01-02 09:00:00          9 0.07843399
5    3    TWD 2017-01-02 09:00:00 2017-01-03 02:00:00         17         NA
6    3    GRO 2017-01-03 02:00:00 2017-01-03 09:00:00          7 0.08376312
7    3    TWD 2017-01-03 09:00:00 2017-01-03 14:00:00          5         NA
8    3    GRO 2017-01-03 14:00:00 2017-01-03 16:00:00          2 0.20695114
9    4    TWD 2017-01-03 16:00:00 2017-01-04 02:00:00         10         NA
10   4    GRO 2017-01-04 02:00:00 2017-01-04 09:00:00          7 0.06681443
11  19    TWD 2017-01-04 09:00:00 2017-01-19 07:00:00        358         NA
         rate    Max.twd        Max.twd.time    Avg.twd     STD.twd
2   25.600434         NA                <NA>         NA          NA
3          NA 0.02239036 2017-01-01 13:00:00 0.01202655 0.007116119
4    8.714888         NA                <NA>         NA          NA
5          NA 0.08036932 2017-01-02 15:00:00 0.04966725 0.026681632
6   11.966160         NA                <NA>         NA          NA
7          NA 0.10906537 2017-01-03 14:00:00 0.03992748 0.042127223
8  103.475570         NA                <NA>         NA          NA
9          NA 0.06611217 2017-01-03 18:00:00 0.03600277 0.020475713
10   9.544919         NA                <NA>         NA          NA
11         NA 0.81116102 2017-01-18 19:00:00 0.43560431 0.169233890
> head(zg.phase[[2]],10)
                  Time Phases         TWD
1  2017-01-01 00:00:00   <NA> 0.008712770
2  2017-01-01 01:00:00    GRO 0.000000000
3  2017-01-01 02:00:00    GRO 0.000000000
4  2017-01-01 03:00:00    GRO 0.000000000
5  2017-01-01 04:00:00    GRO 0.000000000
6  2017-01-01 05:00:00    GRO 0.000000000
7  2017-01-01 06:00:00    GRO 0.000000000
8  2017-01-01 07:00:00    GRO 0.000000000
9  2017-01-01 08:00:00    GRO 0.000000000
10 2017-01-01 09:00:00    TWD 0.003905771
> 
> 
> 
> 
> cleanEx()
> nameEx("spline.interpolation")
> ### * spline.interpolation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spline.interpolation
> ### Title: Detection and spline interpolation of missing values in
> ###   dendrometer data.
> ### Aliases: spline.interpolation
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(nepa17)
> gf_nepa17<-spline.interpolation(df=nepa17, resolution=60)
  Missing.location.after Number.of.consecutive.missings
1    2017-08-26 18:00:00                              4
2    2017-08-27 21:00:00                              3
Done!!!
> head(gf_nepa17,10)
                  Time       T2       T3
1  2017-01-01 00:00:00 62.26459 48.16801
2  2017-01-01 01:00:00 62.27330 48.16559
3  2017-01-01 02:00:00 62.30913 48.16269
4  2017-01-01 03:00:00 62.34835 48.16414
5  2017-01-01 04:00:00 62.37740 48.16269
6  2017-01-01 05:00:00 62.42001 48.16705
7  2017-01-01 06:00:00 62.44954 48.16801
8  2017-01-01 07:00:00 62.46407 48.18302
9  2017-01-01 08:00:00 62.46939 48.20869
10 2017-01-01 09:00:00 62.46552 48.21498
> 
> 
> 
> 
> cleanEx()
> nameEx("twd.maxima")
> ### * twd.maxima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: twd.maxima
> ### Title: Locating the maxima of TWD periods
> ### Aliases: twd.maxima
> 
> ### ** Examples
> 
> library(dendRoAnalyst)
> data(gf_nepa17)
> df1=gf_nepa17[2500:3500,]
> twd_max<-twd.maxima(df=df1, TreeNum=2, showPlot=FALSE)
> head(twd_max,10)
             start.time            end.time                Time         TWD
20  2017-04-15 11:00:00 2017-04-16 04:00:00 2017-04-15 22:00:00 0.028245289
43  2017-04-16 08:00:00 2017-04-18 06:00:00 2017-04-16 21:00:00 0.070221431
65  2017-04-16 08:00:00 2017-04-18 06:00:00 2017-04-17 19:00:00 0.063032434
89  2017-04-18 08:00:00 2017-04-19 06:00:00 2017-04-18 19:00:00 0.063130250
113 2017-04-19 10:00:00 2017-04-20 00:00:00 2017-04-19 19:00:00 0.034571080
128 2017-04-20 07:00:00 2017-04-20 11:00:00 2017-04-20 10:00:00 0.004259490
135 2017-04-20 13:00:00 2017-04-20 22:00:00 2017-04-20 17:00:00 0.012007142
158 2017-04-21 12:00:00 2017-04-21 21:00:00 2017-04-21 16:00:00 0.009391018
183 2017-04-22 15:00:00 2017-04-22 18:00:00 2017-04-22 17:00:00 0.003387455
207 2017-04-23 12:00:00 2017-04-24 00:00:00 2017-04-23 17:00:00 0.005701795
    duration_from_start twd.number
20                  540          1
43                  660          2
65                 1980          2
89                  540          3
113                 420          4
128                  60          5
135                 120          6
158                 120          7
183                   0          9
207                 180         10
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.15 0.05 7.23 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
